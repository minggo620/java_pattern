																		设计模式6大原则
						1.单一职责原则（Single Responsibility Principle）SRP
						2.里氏替换原则（Liskov Substitution Principle）LSP
						3.依赖倒置原则（Dependence Inversion Principle）DIP
						4.接口隔离原则（Interface Segregation Principle）ISP
						5.迪米特法则（Law of Demeter）LoD
						6.开闭原则（Open Close Principle）OCP
						
						所有的原则都是公理不是定理，都要是情况而定。
						
						1.单一职责原则（封装特性）
							应该有且只有一个原因引起类的变更。
							1）降低类的复杂度，提高可读性，维护性高，更换风险低。
							2）接口遵循单一，类的变换尽可能是因为一个原因。
						
						2.里氏替换原则（封装和多态特征）
							维护继承特征的一个规范
							1）子类必须完全实现父类方法。（使用上是使用父类或者接口，如：AbstractObject a = new ConcreteAbstractObject();）
							2）子类可以有自己的个性。
							3）覆写或者实现父类的方法时输入参数可以被放大。
							4）覆写或者实现父类方法的输出结果可以被缩小。
							
							父类可以出现的地方，子类都可以，反则不一定。
						
						3.依赖倒置原则（封装）
							面向接口编程重要体现
							
							1）降低类间耦合。
							2）可读性高。
							3）扩展性强。
							
							Spring框架的和兴IOC就是重要体现。
							
						4.接口隔离原则（封装）
							接口指的是类和接口类。
							
							1）接口要尽量小。
							2）接口要高内聚。
							3）服务要专项定制。
							
							在单一职责原则基础上再考虑接口隔离原则。
							
						5.迪米特法则（封装）
							每个类对相关类知道的越少越好，反过来就是封装密闭，暴露减少。
							1）类与类之间的关系单一。
							2）类的方法和操作数以私有的原则进行定义。
						
						6.开闭原则（封装）
							对扩展开放，对修改关闭。
							
							1）面向对象最重要原则。
							2）不改变的使用抽象封装起来。
							3）变化的使用接口或者集成进行扩展。
							
							前5种原则都是属于开闭原则。
							
							